/**
 * Test de coh√©rence spatiale GTFS vs GAMA - Transport Shapes (Version Simplifi√©e)
 * Objectif : V√©rifier que les points des shapes GTFS sont correctement projet√©s dans GAMA
 */

model GTFSShapeProjectionValidation

global {
    // === CONFIGURATION ===
    string projection_crs <- "EPSG:2154"; // Lambert-93 (configurable)
    gtfs_file gtfs_f <- gtfs_file("../../includes/tisseo_gtfs_v2");
    file data_file <- shape_file("../../includes/shapeFileToulouse.shp");
    geometry shape <- envelope(data_file);
    
    // === √âTAPE 1 : MAPS GTFS ===
    map<string, list> map_gtfs <- []; // [shape_id] -> [first_point_lat, first_point_lon, total_points]
    
    // === √âTAPE 2 : MAPS GTFS PROJET√âES ===
    map<string, list> map_gtfs_projected <- []; // [shape_id] -> [first_point_projected, total_points]
    
    // === √âTAPE 3 : MAPS GAMA ===
    map<string, list> map_gama <- []; // [shapeId] -> [first_gama_point, total_gama_points]
    
    // === VARIABLES DE RAPPORT ===
    int total_shapes_tested <- 0;
    int valid_shapes <- 0;
    int invalid_shapes <- 0;
    list<string> error_shapes <- [];
    list<float> distances <- [];
    float tolerance_distance <- 10.0; // 10m
    bool test_global_success <- false;
    
    // === VARIABLES POUR TESTS √âTENDUS ===
    bool projection_consistency_test <- false;
    bool point_count_consistency_test <- false;
    
    init {
        write "=== ALGORITHME DE TEST DE COH√âRENCE SHAPES GTFS-GAMA ===";
        
        // √âTAPE 1 : EXTRACTION SHAPES GTFS
        do extract_shapes_from_gtfs;
        
        // √âTAPE 2 : PROJECTION DES COORDONN√âES
        do project_gtfs_coordinates;
        
        // √âTAPE 3 : CR√âATION AGENTS ET R√âCUP√âRATION
        do create_and_collect_gama_agents;
        
        // √âTAPE 4 : COMPARAISON
        do compare_gtfs_vs_gama;
        
        // √âTAPE 5 : TESTS COMPL√âMENTAIRES
        do run_additional_tests;
        
        // √âTAPE 6 : G√âN√âRATION RAPPORT COMPLET
        do generate_final_report;
    }
    
    // === √âTAPE 1 : EXTRAIRE LES SHAPES DEPUIS LE GTFS ===
    action extract_shapes_from_gtfs {
        write "\n=== √âTAPE 1 : EXTRACTION SHAPES GTFS ===";
        
        try {
            // Cr√©er temporairement les shapes pour extraire leurs donn√©es
            list<transport_shape> temp_shapes <- [];
            create transport_shape from: gtfs_f returns: temp_shapes;
            
            write "üìä Agents temporaires cr√©√©s : " + length(temp_shapes);
            
            // Extraire les donn√©es GTFS originales via TransportShapeSkill
            ask temp_shapes {
                if self.shapeId != nil and self.shape != nil and length(self.shape.points) > 0 {
                    // Prendre le premier point comme r√©f√©rence pour la comparaison
                    point first_point <- self.shape.points[0];
                    
                    // Conversion inverse pour obtenir les coordonn√©es WGS84 d'origine
                    point wgs84_coord <- CRS_transform(first_point, projection_crs, "EPSG:4326");
                    
                    myself.map_gtfs[string(self.shapeId)] <- [wgs84_coord.y, wgs84_coord.x, length(self.shape.points)]; // [lat, lon, count]
                    
                    // Debug pour les 5 premiers
                    if length(myself.map_gtfs) <= 5 {
                        write "üìç GTFS Shape: " + string(self.shapeId) + " | Points: " + length(self.shape.points) + 
                              " | Premier point WGS84: [" + wgs84_coord.y + ", " + wgs84_coord.x + "]";
                    }
                }
                do die; // Supprimer les agents temporaires
            }
            
        } catch {
            write "‚ùå Erreur lors de l'extraction GTFS - Cr√©ation de donn√©es de test";
            
            // Donn√©es de test si GTFS indisponible
            map_gtfs["SHAPE_TEST_01"] <- [47.212841, -1.561781, 15];
            map_gtfs["SHAPE_TEST_02"] <- [47.218371, -1.553621, 20];
            map_gtfs["SHAPE_TEST_03"] <- [47.215350, -1.548920, 12];
        }
        
        write "‚úÖ √âtape 1 termin√©e : " + length(map_gtfs) + " shapes extraits du GTFS";
    }
    
    // === √âTAPE 2 : CALCULER LA POSITION PROJET√âE POUR CHAQUE SHAPE ===
    action project_gtfs_coordinates {
        write "\n=== √âTAPE 2 : PROJECTION COORDONN√âES GTFS ===";
        
        loop shape_id over: map_gtfs.keys {
            list shape_data <- map_gtfs[shape_id];
            float shape_lat <- shape_data[0];
            float shape_lon <- shape_data[1];
            int point_count <- int(shape_data[2]);
            
            // Projection WGS84 -> Lambert-93 (ou autre CRS configur√©)
            point point_proj <- CRS_transform({shape_lon, shape_lat}, "EPSG:4326", projection_crs);
            
            map_gtfs_projected[shape_id] <- [point_proj, point_count];
            
            // Debug pour les 5 premiers
            if length(map_gtfs_projected) <= 5 {
                write "üéØ Projection: " + shape_id + " | Premier point projet√©: " + point_proj + " | Points: " + point_count;
            }
        }
        
        write "‚úÖ √âtape 2 termin√©e : " + length(map_gtfs_projected) + " shapes projet√©s";
    }
    
    // === √âTAPE 3 : R√âCUP√âRER LES AGENTS CR√â√âS DANS GAMA ===
    action create_and_collect_gama_agents {
        write "\n=== √âTAPE 3 : CR√âATION ET COLLECTE AGENTS GAMA ===";
        
        // Cr√©er les vrais agents GAMA
        create transport_shape from: gtfs_f;
        
        write "üìä Agents GAMA cr√©√©s : " + length(transport_shape);
        
        // Collecter les donn√©es des agents (utilisation des attributs TransportShapeSkill)
        ask transport_shape {
            // TransportShapeSkill fournit automatiquement shapeId et shape
            if self.shapeId != nil and self.shape != nil and length(self.shape.points) > 0 {
                point first_gama_point <- self.shape.points[0];
                int total_gama_points <- length(self.shape.points);
                
                myself.map_gama[string(self.shapeId)] <- [first_gama_point, total_gama_points];
                
                // Debug pour les 5 premiers
                if length(myself.map_gama) <= 5 {
                    write "ü§ñ Agent GAMA: " + string(self.shapeId) + " | Points: " + total_gama_points + 
                          " | Premier point: " + first_gama_point;
                }
            } else {
                write "‚ö†Ô∏è Agent sans shapeId ou shape valide";
            }
        }
        
        write "‚úÖ √âtape 3 termin√©e : " + length(map_gama) + " agents collect√©s";
    }
    
    // === √âTAPE 4 : COMPARER LES DEUX MAPS ===
    action compare_gtfs_vs_gama {
        write "\n=== √âTAPE 4 : COMPARAISON GTFS vs GAMA ===";
        
        // Trouver les shapes communs
        list<string> common_shapes <- [];
        loop shape_id over: map_gtfs_projected.keys {
            if map_gama contains_key shape_id {
                common_shapes <- common_shapes + shape_id;
            }
        }
        
        write "üìä Shapes communs trouv√©s : " + length(common_shapes);
        total_shapes_tested <- length(common_shapes);
        
        // Comparer chaque shape commun
        loop shape_id over: common_shapes {
            // R√©cup√©rer positions du premier point
            list gtfs_data <- map_gtfs_projected[shape_id];
            point gtfs_position <- gtfs_data[0];
            int gtfs_point_count <- int(gtfs_data[1]);
            
            list gama_data <- map_gama[shape_id];
            point gama_position <- gama_data[0];
            int gama_point_count <- int(gama_data[1]);
            
            // Calculer distance entre premiers points
            float distance <- gtfs_position distance_to gama_position;
            distances <- distances + distance;
            
            // V√©rifier aussi la coh√©rence du nombre de points
            bool point_count_ok <- (gtfs_point_count = gama_point_count);
            
            // √âvaluer la validit√©
            if distance < tolerance_distance and point_count_ok {
                valid_shapes <- valid_shapes + 1;
                write "‚úÖ VALID: " + shape_id + " | Distance: " + string(distance) + "m | Points: " + gtfs_point_count;
            } else {
                invalid_shapes <- invalid_shapes + 1;
                error_shapes <- error_shapes + shape_id;
                write "‚ùå INVALID: " + shape_id + " | Distance: " + string(distance) + "m | " +
                      "Points GTFS: " + gtfs_point_count + " vs GAMA: " + gama_point_count;
                write "   GTFS: " + gtfs_position + " | GAMA: " + gama_position;
            }
        }
        
        write "‚úÖ √âtape 4 termin√©e : Comparaison effectu√©e";
    }
    
    // === √âTAPE 5 : TESTS COMPL√âMENTAIRES ===
    action run_additional_tests {
        write "\n=== √âTAPE 5 : TESTS COMPL√âMENTAIRES ===";
        
        // Test 1: Coh√©rence de projection
        do test_projection_consistency;
        
        // Test 2: Coh√©rence du nombre de points
        do test_point_count_consistency;
        
        write "‚úÖ √âtape 5 termin√©e : Tests compl√©mentaires effectu√©s";
    }
    
    // Test de coh√©rence de projection
    action test_projection_consistency {
        write "\n--- TEST COH√âRENCE PROJECTION ---";
        
        // Tester la projection avec des points de r√©f√©rence connus
        point test_wgs84 <- {2.3522, 48.8566}; // Paris Notre-Dame
        point test_projected <- CRS_transform(test_wgs84, "EPSG:4326", projection_crs);
        
        // V√©rifier que la projection produit des r√©sultats coh√©rents
        bool projection_works <- (test_projected != nil) and 
                                (abs(test_projected.x) > 1000) and 
                                (abs(test_projected.y) > 1000);
        
        projection_consistency_test <- projection_works;
        
        write "Point test WGS84: " + string(test_wgs84);
        write "Point test projet√© (" + projection_crs + "): " + string(test_projected);
        write "Test coh√©rence projection: " + (projection_consistency_test ? "‚úÖ R√âUSSI" : "‚ùå √âCHOU√â");
    }
    
    // Test coh√©rence nombre de points
    action test_point_count_consistency {
        write "\n--- TEST COH√âRENCE NOMBRE DE POINTS ---";
        
        int consistent_counts <- 0;
        int total_compared <- 0;
        
        loop shape_id over: map_gtfs_projected.keys {
            if map_gama contains_key shape_id {
                total_compared <- total_compared + 1;
                
                list gtfs_data <- map_gtfs_projected[shape_id];
                int gtfs_count <- int(gtfs_data[1]);
                
                list gama_data <- map_gama[shape_id];
                int gama_count <- int(gama_data[1]);
                
                if gtfs_count = gama_count {
                    consistent_counts <- consistent_counts + 1;
                }
            }
        }
        
        point_count_consistency_test <- (consistent_counts = total_compared);
        
        write "Shapes avec nombre de points coh√©rent: " + consistent_counts + "/" + total_compared;
        write "Test coh√©rence nombre de points: " + (point_count_consistency_test ? "‚úÖ R√âUSSI" : "‚ùå √âCHOU√â");
    }
    
    // === √âTAPE 6 : G√âN√âRER RAPPORT FINAL ===
    action generate_final_report {
        write "\n=== √âTAPE 6 : RAPPORT FINAL ===";
        
        // Calculer statistiques
        float success_rate <- total_shapes_tested > 0 ? (valid_shapes / total_shapes_tested) * 100 : 0;
        test_global_success <- (invalid_shapes = 0) and (total_shapes_tested > 0) and 
                              projection_consistency_test and point_count_consistency_test;
        
        float avg_distance <- length(distances) > 0 ? mean(distances) : 0;
        float max_distance <- length(distances) > 0 ? max(distances) : 0;
        float min_distance <- length(distances) > 0 ? min(distances) : 0;
        
        // Rapport d√©taill√©
        write "\nüìã RAPPORT DE COH√âRENCE SHAPES GTFS-GAMA :";
        write "==============================================";
        write "üåç CONFIGURATION :";
        write "   - Projection utilis√©e : " + projection_crs;
        write "   - Tol√©rance accept√©e : " + string(tolerance_distance) + "m";
        write "";
        write "üìä STATISTIQUES GLOBALES :";
        write "   - Shapes GTFS extraits : " + length(map_gtfs);
        write "   - Shapes GTFS projet√©s : " + length(map_gtfs_projected);
        write "   - Agents GAMA cr√©√©s : " + length(map_gama);
        write "   - Shapes test√©s (communs) : " + total_shapes_tested;
        write "";
        write "‚úÖ R√âSULTATS DE VALIDATION :";
        write "   - Shapes valides (< " + string(tolerance_distance) + "m) : " + valid_shapes;
        write "   - Shapes invalides (‚â• " + string(tolerance_distance) + "m) : " + invalid_shapes;
        write "   - Taux de r√©ussite : " + string(success_rate) + "%";
        write "";
        write "üìè STATISTIQUES DE DISTANCE :";
        write "   - Distance moyenne : " + string(avg_distance) + "m";
        write "   - Distance minimale : " + string(min_distance) + "m";
        write "   - Distance maximale : " + string(max_distance) + "m";
        write "   - Tol√©rance : " + string(tolerance_distance) + "m";
        write "";
        write "üîß TESTS COMPL√âMENTAIRES :";
        write "   - Coh√©rence projection : " + (projection_consistency_test ? "‚úÖ R√âUSSI" : "‚ùå √âCHOU√â");
        write "   - Coh√©rence nombre points : " + (point_count_consistency_test ? "‚úÖ R√âUSSI" : "‚ùå √âCHOU√â");
        write "";
        write "üéØ R√âSULTAT GLOBAL : " + (test_global_success ? "‚úÖ TEST R√âUSSI" : "‚ùå TEST √âCHOU√â");
        
        if length(error_shapes) > 0 {
            write "";
            write "‚ùå SHAPES EN ERREUR :";
            loop error_shape over: error_shapes {
                write "   - " + error_shape;
            }
        }
        
        write "==============================================";
        
        // Conclusion technique
        if test_global_success {
            write "üéâ CONCLUSION : La projection et les shapes sont coh√©rents !";
            write "   Les donn√©es g√©ospatiales sont pr√™tes pour la simulation.";
        } else {
            write "üîß CONCLUSION : Des incoh√©rences d√©tect√©es. V√©rifications recommand√©es :";
            write "   1. Configuration projection CRS (actuellement : " + projection_crs + ")";
            write "   2. Qualit√© des donn√©es shapes.txt";
            write "   3. Processus de cr√©ation des agents transport_shape";
            write "   4. Coh√©rence du nombre de points par shape";
        }
        
        write "\nüìà M√âTRIQUES DE QUALIT√â :";
        write "   - Pr√©cision moyenne : " + string(avg_distance) + "m";
        write "   - Fiabilit√© : " + string(success_rate) + "% des shapes valid√©s";
        write "   - Couverture : " + string(total_shapes_tested) + " shapes test√©s";
        
        // Mise √† jour des couleurs des agents selon les r√©sultats
        do update_agent_colors;
    }
    
    // Action pour mettre √† jour les couleurs des agents selon les r√©sultats
    action update_agent_colors {
        ask transport_shape {
            string shape_key <- string(self.shapeId);
            bool is_valid <- not (error_shapes contains shape_key);
            do update_validation_color(is_valid);
        }
    }
    
    // Action pour diagnostic d√©taill√©
    action show_detailed_comparison {
    write "\n=== COMPARAISON D√âTAILL√âE ===";
    
    loop shape_id over: map_gtfs_projected.keys {
        if map_gama contains_key shape_id {
            list gtfs_data <- map_gtfs_projected[shape_id];
            list gama_data <- map_gama[shape_id];
            
            // ‚úÖ CORRECTION : Cast explicite en point
            point gtfs_point <- point(gtfs_data[0]);
            point gama_point <- point(gama_data[0]);
            int gtfs_count <- int(gtfs_data[1]);
            int gama_count <- int(gama_data[1]);
            
            // ‚úÖ CORRECTION : Calcul de distance avec types explicites
            float distance <- gtfs_point distance_to gama_point;
            
            write "Shape: " + shape_id;
            write "  GTFS proj: " + string(gtfs_point) + " (" + string(gtfs_count) + " points)";
            write "  GAMA pos:  " + string(gama_point) + " (" + string(gama_count) + " points)";
            write "  Distance:  " + string(distance) + "m";
            write "";
        }
    }
}
}

// Species transport_shape avec TransportShapeSkill (similaire au mod√®le stops)
species transport_shape skills: [TransportShapeSkill] {
    string name;
    rgb color <- #blue;
    float width <- 2.0;
    
    init {
        if name = nil or name = "" {
            name <- "Shape_" + string(self);
        }
        color <- #blue;
        width <- 2.0;
    }
    
    // Action pour mettre √† jour la couleur selon le r√©sultat du test
    action update_validation_color(bool is_valid) {
        if is_valid {
            color <- #green;
            width <- 3.0;
        } else {
            color <- #red;
            width <- 5.0;
        }
    }
    
    aspect base {
        if shape != nil {
            draw shape color: color width: width;
        }
    }
    
    aspect detailed {
        if shape != nil {
            draw shape color: color width: width;
            
            // Afficher les informations de validation
            if shapeId != nil {
                point centroid <- shape.location;
                draw string(shapeId) color: #black font: font("Arial", 8, #bold) at: centroid;
                
                // Afficher le nombre de points
                string point_info <- "Points: " + string(length(shape.points));
                draw point_info color: #darkblue font: font("Arial", 7) at: centroid + {0, 25};
            }
            
            // Marquer le premier point pour validation visuelle
            if length(shape.points) > 0 {
                point first_pt <- shape.points[0];
                draw circle(20) at: first_pt color: color border: #white width: 2;
                draw "1" color: #white font: font("Arial", 8, #bold) at: first_pt;
            }
        }
    }
}

experiment ValidationProjection type: gui {
    parameter "Tol√©rance distance (m)" var: tolerance_distance min: 1 max: 100 step: 1;
    parameter "Projection CRS" var: projection_crs among: ["EPSG:2154", "EPSG:3857", "EPSG:4326"];
    
    output {
        display "Carte de Coh√©rence Shapes" type: 2d {
            species transport_shape aspect: detailed;
            
            overlay position: {10, 10} size: {450 #px, 350 #px} background: #white transparency: 0.8 {
                draw "=== TEST DE COH√âRENCE SHAPES GTFS-GAMA ===" at: {10#px, 20#px} color: #black font: font("Arial", 12, #bold);
                
                draw "üåç CONFIGURATION :" at: {10#px, 45#px} color: #blue font: font("Arial", 10, #bold);
                draw "Projection: " + projection_crs at: {20#px, 65#px} color: #black;
                draw "Tol√©rance: " + string(tolerance_distance) + "m" at: {20#px, 80#px} color: #black;
                
                draw "üìä DONN√âES :" at: {10#px, 105#px} color: #blue font: font("Arial", 10, #bold);
                draw "Shapes GTFS : " + length(map_gtfs) at: {20#px, 125#px} color: #black;
                draw "Agents GAMA : " + length(map_gama) at: {20#px, 140#px} color: #black;
                draw "Shapes test√©s : " + total_shapes_tested at: {20#px, 155#px} color: #black;
                
                draw "‚úÖ R√âSULTATS :" at: {10#px, 180#px} color: #green font: font("Arial", 10, #bold);
                draw "Shapes valides : " + valid_shapes at: {20#px, 200#px} color: #green;
                draw "Shapes invalides : " + invalid_shapes at: {20#px, 215#px} color: #red;
                
                if total_shapes_tested > 0 {
                    float success_rate <- (valid_shapes / total_shapes_tested) * 100;
                    draw "Taux de r√©ussite : " + string(success_rate) + "%" at: {20#px, 230#px} 
                         color: (success_rate = 100 ? #green : #orange);
                }
                
                draw "üìè DISTANCES :" at: {10#px, 255#px} color: #purple font: font("Arial", 10, #bold);
                if length(distances) > 0 {
                    draw "Moyenne : " + string(mean(distances)) + "m" at: {20#px, 275#px} color: #black;
                    draw "Maximum : " + string(max(distances)) + "m" at: {20#px, 290#px} color: #black;
                }
                
                draw "üéØ R√âSULTAT GLOBAL :" at: {10#px, 315#px} color: #black font: font("Arial", 10, #bold);
                string result_text <- test_global_success ? "‚úÖ TEST R√âUSSI" : "‚ùå TEST √âCHOU√â";
                rgb result_color <- test_global_success ? #green : #red;
                draw result_text at: {20#px, 335#px} color: result_color font: font("Arial", 11, #bold);
            }
        }
        
        display "Graphique des Distances" {
            chart "Distribution des Distances Premier Point" type: histogram {
                if length(distances) > 0 {
                    data "Distances (m)" value: distances color: #blue;
                }
            }
        }
        
        display "Analyse par Shape" {
            chart "Validation par Shape" type: pie {
                data "Shapes Valides" value: valid_shapes color: #green;
                data "Shapes Invalides" value: invalid_shapes color: #red;
            }
        }
    }
}